1
00:00:00,400 --> 00:00:04,520
Today I've got something special to share. 
I just received this kit in the mail which  

2
00:00:04,520 --> 00:00:09,040
includes this chip which is likely different 
from any other you've come across before,  

3
00:00:09,040 --> 00:00:12,760
because this chip is the first of its 
kind to be made publicly available.

4
00:00:12,760 --> 00:00:18,720
It's custom-manufactured using over 150 distinct 
designs submitted by an open source community.

5
00:00:18,720 --> 00:00:22,040
The designs on this chip are not 
just from seasoned professionals,  

6
00:00:22,040 --> 00:00:27,000
they're also from enthusiasts, hobbyists, 
and total beginners of all ages.

7
00:00:27,000 --> 00:00:29,960
If you're one of the people whose 
design is included on this chip,  

8
00:00:29,960 --> 00:00:32,479
congratulations! And thank you for contributing.

9
00:00:32,479 --> 00:00:35,000
If you have one of these kits or 
you're just here because you're  

10
00:00:35,000 --> 00:00:37,960
curious to see what the community 
has made, I'm going to give a quick  

11
00:00:37,960 --> 00:00:42,520
tour of the board and some of the on-chip 
projects, and show you how to get started.

12
00:00:42,520 --> 00:00:47,960
So let's crack on!

13
00:00:47,960 --> 00:00:52,520
A year ago I joined the "Zero to ASIC" course 
hosted by Matt Venn, with the promise that for  

14
00:00:52,520 --> 00:00:57,920
a surprisingly low price, someone like me with no 
prior experience could learn to design a chip --  

15
00:00:57,920 --> 00:01:03,960
an "ASIC" or "Application-Specific Integrated 
Circuit" -- and actually get it manufactured.

16
00:01:03,960 --> 00:01:07,960
Matt Venn also leads the "Tiny Tapeout" 
program that enables the manufacturing,  

17
00:01:07,960 --> 00:01:11,720
and while I had just missed out on 
joining this original "TT02" shuttle run,  

18
00:01:11,720 --> 00:01:16,760
it was exciting to watch Matt and the Tiny Tapeout 
team do the world's first live chip bring-up,  

19
00:01:16,760 --> 00:01:20,680
and I joined the wait list to purchase one 
of the few spare boards not already allocated  

20
00:01:20,680 --> 00:01:24,720
to the original contributors... 
And that's what we have here now!

21
00:01:24,720 --> 00:01:28,920
Taking a quick look at the board we see the 
main ASIC: the crown jewel of custom-made  

22
00:01:28,920 --> 00:01:33,040
silicon which is mounted on a carrier 
that acts as a breakout board, and that  

23
00:01:33,040 --> 00:01:38,240
is plugged into the demo board which provides 
input, output, and some other basic control.

24
00:01:38,240 --> 00:01:42,520
PCB manufacturing was made possible by the 
sponsorship of a number of companies with  

25
00:01:42,520 --> 00:01:45,880
Efabless also facilitating the ASIC's manufacture.

26
00:01:45,880 --> 00:01:49,640
The board design is by Pat Deegan of 
Psychogenic Technologies and I must  

27
00:01:49,640 --> 00:01:53,200
say this kit looks and feels 
pretty nice. So thanks Pat!

28
00:01:53,200 --> 00:01:57,600
Okay let's get into it already! Time to 
plug the board in and see what happens.

29
00:01:57,600 --> 00:02:02,520
Use a USB-C cable just for power delivery. 
Some future versions will also use it for  

30
00:02:02,520 --> 00:02:08,080
computer control. Straight away we see life. 
From the factory these DIP switches select  

31
00:02:08,080 --> 00:02:12,120
the active design which we'll fiddle 
with later. My board has design number  

32
00:02:12,120 --> 00:02:17,000
131 selected which is a simple "Hello, 
World!" that we'll explore in a moment.

33
00:02:17,000 --> 00:02:21,480
We see the "Power good" LEDs and a 
flickering GPIO LED. An internal  

34
00:02:21,480 --> 00:02:27,000
CPU drives it but the designs themselves 
are free-running hard circuits in silicon.

35
00:02:27,000 --> 00:02:31,480
The 8 digital outputs from the chip each 
drive a segment of this LED display,  

36
00:02:31,480 --> 00:02:36,960
which this design uses to display "HELLO", 
albeit a bit fast out of the box. Note that  

37
00:02:36,960 --> 00:02:42,000
the outputs are also available on 
the pins labeled "out0" to "out7".

38
00:02:42,000 --> 00:02:47,120
Up here there is a jumper which connects an 
onboard 20 MHz oscillator supplying the ASIC's  

39
00:02:47,120 --> 00:02:53,800
main system clock, and if we disconnect it we see 
that the design freezes as well as the GPIO LED,  

40
00:02:53,800 --> 00:02:58,560
indicating a halt in the onchip CPU as well as 
in the so-called "scan-chain" logic that links  

41
00:02:58,560 --> 00:03:04,680
all the designs. Replacing the jumper to the 
same position lets everything carry on again.

42
00:03:04,680 --> 00:03:09,000
The chip has 8 digital inputs which can 
be turned on or off using the DIP switches  

43
00:03:09,000 --> 00:03:16,080
over here. Switching left is off; right 
is on. As with the outputs these inputs  

44
00:03:16,080 --> 00:03:21,840
also have pins on the side labeled "in0" to 
"in7". Just be aware that if you intend to  

45
00:03:21,840 --> 00:03:27,240
drive any externally their respective DIP 
switches should be in the off position.

46
00:03:27,240 --> 00:03:31,920
Up here is a reset button and a clock button, 
each with a debouncing circuit to ensure clean  

47
00:03:31,920 --> 00:03:37,200
switching. The clock button is actually wired 
directly to "in0" and the reset button to  

48
00:03:37,200 --> 00:03:44,360
"in1". In TT02 and 03 these signals are just by 
convention and not all designs use them for the  

49
00:03:44,360 --> 00:03:50,600
same purposes. TT04 and above have dedicated 
clock and reset lines and offer more I/O.

50
00:03:50,600 --> 00:03:54,680
Here with the reset button pressed and 
asserting the "in1" signal, this "Hello"  

51
00:03:54,680 --> 00:04:01,040
design actually uses the signal for its own clock 
divider option, hence slowing it down a bit.

52
00:04:01,040 --> 00:04:06,240
The clock button can be used to send individual 
clock pulses via "in0" but with this "SLOW" jumper  

53
00:04:06,240 --> 00:04:12,400
connected, the ASIC is actually generating that 
"in0" clock internally, itself. If we remove the  

54
00:04:12,400 --> 00:04:17,519
SLOW jumper, the GPIO LED keeps blinking but 
the design halts, and the clock button would  

55
00:04:17,519 --> 00:04:22,520
now allow us to single-step the design's 
clock if we wanted to control it directly.

56
00:04:22,520 --> 00:04:26,440
Now let's explain how we can actually change 
the generated slow clock signal by dividing  

57
00:04:26,440 --> 00:04:32,280
it. This is an important testing feature that is 
part of the ASIC itself, not of this one design.

58
00:04:32,280 --> 00:04:35,280
When replacing the SLOW jumper 
or when powering up the board,  

59
00:04:35,280 --> 00:04:39,160
the rising edge on this "slow clock enable" 
signal causes the binary number presented by  

60
00:04:39,160 --> 00:04:44,160
the input switches to be sampled and latched at 
that moment, thus used as the input value for  

61
00:04:44,160 --> 00:04:48,920
the slow clock divider before the inputs 
are then fed directly into the design.

62
00:04:48,920 --> 00:04:53,200
In other words, if you were to turn on all 
the switches and then replace the SLOW jumper,  

63
00:04:53,200 --> 00:04:57,720
the input value for the slow clock 
divider would be the maximum of 255,  

64
00:04:57,720 --> 00:05:02,080
hence dividing the clock by 512, 
to make it just under 10 Hz,  

65
00:05:02,080 --> 00:05:06,320
according to this formula as found 
in the demo board's technical notes.

66
00:05:06,320 --> 00:05:13,320
In this case our original slow clock divider 
input was 128, to divide the clock by 258,  

67
00:05:13,320 --> 00:05:18,160
and I've now switched it to 
254 to divide the clock by 510,  

68
00:05:18,160 --> 00:05:24,360
as we again place the slow clock jumper. 
Switching all the inputs back to the normal  

69
00:05:24,360 --> 00:05:29,680
running state for this design, we see now 
that it is approximately half the speed.

70
00:05:29,680 --> 00:05:34,120
I'm going to count how many iterations the 
design completes in 60 seconds. The design  

71
00:05:34,120 --> 00:05:38,840
goes through a total of 16 distinct states 
and we can use a total count of iterations  

72
00:05:38,840 --> 00:05:43,120
in a given timeframe to calculate the 
approximate slow clock rate. In this  

73
00:05:43,120 --> 00:05:48,320
case it's about 36 iterations so if we 
divide that number by 60 seconds and  

74
00:05:48,320 --> 00:05:55,000
multiply it by the 16 states, we get pretty 
close to the calculated slow clock of 9.8 Hz.

75
00:05:55,000 --> 00:05:59,200
There are 161 distinct designs on this 
chip so let's take a look at a couple  

76
00:05:59,200 --> 00:06:02,840
more that are easy enough to verify on this board.

77
00:06:02,840 --> 00:06:07,120
Changing the project selection DIP switches 
allows us to select the active design in real  

78
00:06:07,120 --> 00:06:13,040
time. The data sheet of each design shows you 
how to set the project selection DIP switches.

79
00:06:13,040 --> 00:06:17,640
Here I'm selecting design #0 which is a 
straight-through inverter design. Each input  

80
00:06:17,640 --> 00:06:24,320
signal, if low, becomes a high output signal, and 
vice versa. For my inputs in this case "in7" is  

81
00:06:24,320 --> 00:06:30,520
high, "in0" is being driven by the slow clock, 
and all other inputs are low. As a result we see  

82
00:06:30,520 --> 00:06:36,280
the LED segment for "in0" blinking because of the 
inverted slow clock, the dot is not lit because  

83
00:06:36,280 --> 00:06:42,360
it's the LED segment for "in7", and the rest 
are lit up as the inverse of other low inputs.

84
00:06:42,360 --> 00:06:47,960
Inputs would float when switched off but the 
ASIC has enabled pull-down resistors internally.

85
00:06:47,960 --> 00:06:52,360
By bad luck or maybe me being a bit rough, 
my input DIP switches don't always fully  

86
00:06:52,360 --> 00:06:57,960
register the ON state so to work around this 
I wired up some external DIP switches via the  

87
00:06:57,960 --> 00:07:02,480
input header pins, ran them through 
a 1k 8-way resistor network to 3.3V,  

88
00:07:03,480 --> 00:07:08,440
and switched off all the input DIPs on the demo 
board. These external DIP switches seem to do  

89
00:07:08,440 --> 00:07:15,360
the trick... and with that done, we now move on 
to design #68 which is called "Breathing LED".

90
00:07:15,360 --> 00:07:19,720
With this one I adjusted my camera to make the 
effect more visible and I had to run the slow  

91
00:07:19,720 --> 00:07:26,600
clock at the full speed of 2500 Hz by ensuring all 
input DIPs were off before power-up. This design  

92
00:07:26,600 --> 00:07:32,480
demonstrates PWM, or "pulse width modulation", 
which can be seen as a gradual pulsating effect  

93
00:07:32,480 --> 00:07:38,720
on the top LED segment. All other LED segments 
are showing the internal state of the PWM.

94
00:07:38,720 --> 00:07:42,760
I've also hooked up my oscilloscope 
to "out0" and we can see the slowly  

95
00:07:42,760 --> 00:07:48,960
increasing and decreasing duty cycle of the 
PWM waveform that creates the pulsating effect.

96
00:07:48,960 --> 00:07:54,520
Next up it's design #28, "Loading Animation". 
This design is one of many on the chip that  

97
00:07:54,520 --> 00:08:00,640
was drawn out as a schematic using Wokwi, so you 
can easily go and simulate it yourself online.

98
00:08:00,640 --> 00:08:05,400
I've started up my slow clock at full speed 
this time; the fixed appearance of the GPIO  

99
00:08:05,400 --> 00:08:11,360
LED is a clue of that. This design uses a 
negative reset on "in1" so we switch it high  

100
00:08:11,360 --> 00:08:17,520
to let the design run, and an LED segment 
slowly makes its way around the display.

101
00:08:17,520 --> 00:08:22,080
If we switch on "in2" it appears to do 
nothing now but this has actually disabled  

102
00:08:22,080 --> 00:08:27,520
the design's own clock divider, which means 
it's running too fast to be seen. By flipping  

103
00:08:27,520 --> 00:08:31,720
a couple of the higher input switches and 
toggling the "slow clock enable" jumper,  

104
00:08:31,720 --> 00:08:39,320
we can see the effect at more sensible 
speeds... slow at about 12.5 Hz;  

105
00:08:39,320 --> 00:08:50,480
then a little faster at 18.7 Hz; and a 
fair bit faster than that at 35.7 Hz.

106
00:08:50,480 --> 00:08:57,400
How about a bit of sound now? Design #37, 
"Siren", is meant to run at 12.5 kHz but  

107
00:08:57,400 --> 00:09:04,000
for now I'll be running it five times slower 
at 2.5 kHz. Its audio output is "out7" and is  

108
00:09:04,000 --> 00:09:09,200
intended to drive a piezo speaker, but I've put 
it through a simple resistor voltage divider so  

109
00:09:09,200 --> 00:09:14,560
it produces line-out levels to drive the 
auxiliary input of an amplified speaker.

110
00:09:14,560 --> 00:09:24,360
From power on it plays various tones and provides 
a pretty display on the seven segment LEDs. I  

111
00:09:24,360 --> 00:09:28,480
would need to provide an external clock to 
go faster than this but instead I've sped up  

112
00:09:28,480 --> 00:09:36,560
the footage by five times to demonstrate 
how the design was intended to play out.

113
00:09:36,560 --> 00:09:41,280
While I've given a brief overview of some of the 
simpler designs on the TT02 ASIC there's plenty  

114
00:09:41,280 --> 00:09:47,840
more to be seen. Examples of more sophisticated 
designs include: Design #36 which presents 1,000  

115
00:09:47,840 --> 00:09:55,920
digits of pi; design #2 which drives a character 
LCD display; design #25 which transmits different  

116
00:09:55,920 --> 00:10:03,560
messages via UART signaling; design #75 which 
is an internal high-speed ring oscillator;  

117
00:10:03,560 --> 00:10:11,520
many small CPU designs, some with SPI memory 
access; some small scale implementations of FPGAs;  

118
00:10:11,520 --> 00:10:17,240
and many other visual and audio effects, 
puzzles, controllers, and maths devices.

119
00:10:17,240 --> 00:10:20,320
So what comes next? Well if there's 
more you'd like to know about a  

120
00:10:20,320 --> 00:10:24,640
particular design or other features 
of the ASIC or board, let me know.

121
00:10:24,640 --> 00:10:29,960
If you've got a design on the TT02 chip, post a 
comment to let me know and optionally discuss it,  

122
00:10:29,960 --> 00:10:33,760
or otherwise consider making a video 
of your own. And be sure to jump into  

123
00:10:33,760 --> 00:10:37,560
the Tiny Tapeout Discord to discuss your findings.

124
00:10:37,560 --> 00:10:40,040
If you'd like to be involved 
in a future production run,  

125
00:10:40,040 --> 00:10:43,240
particularly as the technology 
offering and tools improve,  

126
00:10:43,240 --> 00:10:47,360
check out tinytapeout.com, or see 
the description of this video.

127
00:10:47,360 --> 00:10:52,720
Please give this video a thumbs up if you found it 
useful or if you find this new frontier exciting,  

128
00:10:52,720 --> 00:10:55,720
and if you would like to see 
more chip design, electronics,  

129
00:10:55,720 --> 00:11:00,000
or my projects in general, please also 
consider subscribing to my channel.

130
00:11:00,000 --> 00:11:04,520
Looking forward I'm more interested in TT03 
which should be coming soon with a doubled  

131
00:11:04,520 --> 00:11:10,960
clock and more designs including a tiny one of 
my own, and then TT04 and 05 which are being  

132
00:11:10,960 --> 00:11:16,920
manufactured at the time of this recording. These 
newer generations, including the upcoming TT06,  

133
00:11:16,920 --> 00:11:23,800
were recently teased with a prototype "TT03p5" 
demo and offer options for more design area, a  

134
00:11:23,800 --> 00:11:31,960
lot more IO, bandwidth on the order of 30 MHz, and 
analog and mixed-signal design support as of TT06.

135
00:11:31,960 --> 00:11:37,200
Since discovering Tiny Tapeout and the Zero to 
ASIC course, I'm addicted! I've got designs on all  

136
00:11:37,200 --> 00:11:58,960
of the Tiny Tapeout shuttles starting with TT03. I 
think I've got a bit of a problem! But I love it!

