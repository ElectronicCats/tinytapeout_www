1
00:00:00,000 --> 00:00:03,828
Este breve video explica cómo enviar
un Verilog u otro proyecto HDL a Tiny

2
00:00:03,852 --> 00:00:05,120
Tapeout.

3
00:00:05,120 --> 00:00:10,080
El sitio web tiene algunos recursos
recopilados aquí en la página Trabajar con HDL.

4
00:00:10,080 --> 00:00:15,120
Echemos un vistazo al repositorio de
demostración de Verilog. El enlace está debajo.

5
00:00:15,120 --> 00:00:19,788
El repositorio se bifurca
de la plantilla de envío.

6
00:00:19,812 --> 00:00:21,360
Si echamos un vistazo al
info.yaml, lo importante es

7
00:00:21,360 --> 00:00:25,308
que el ID de Wokwi se
establece en cero, lo que le

8
00:00:25,332 --> 00:00:26,640
indica al sistema que estamos
haciendo en el diseño HDL.

9
00:00:26,640 --> 00:00:31,008
Luego enumera todos los
archivos fuente por separado.

10
00:00:31,032 --> 00:00:32,480
Debe enumerar todos
los archivos requeridos

11
00:00:32,480 --> 00:00:36,608
o nuestro proceso de
compilación o fallaremos cuando

12
00:00:36,632 --> 00:00:38,000
intentemos incluir su
proyecto. También debemos dar

13
00:00:38,000 --> 00:00:44,168
el nombre del módulo
superior. El nombre de su módulo

14
00:00:44,192 --> 00:00:46,240
superior debe ser único
y comenzar con TT_UM_.

15
00:00:46,240 --> 00:00:50,128
Le sugiero que incluya su
nombre de usuario de GitHub

16
00:00:50,152 --> 00:00:51,440
para asegurarse de que
sea único. Puedes ver que

17
00:00:51,440 --> 00:00:54,113
tenemos las tres luces
verdes pasando por aquí.

18
00:00:54,137 --> 00:00:57,360
El GDS y los documentos
deben realizar un envío y se

19
00:00:57,360 --> 00:01:01,668
recomienda encarecidamente
la prueba. Si vamos a la

20
00:01:01,692 --> 00:01:03,120
fuente, podemos ver que tenemos los archivos
Verilog del contador y del decodificador.

21
00:01:03,120 --> 00:01:05,912
Dentro del mostrador
tenemos el módulo superior.

22
00:01:05,936 --> 00:01:09,120
El módulo superior debe
tener exactamente estos

23
00:01:09,120 --> 00:01:11,988
puertos de entrada y
salida. Esta es la interfaz

24
00:01:12,012 --> 00:01:14,880
entre su código y Tiny Tapeout.

25
00:01:14,880 --> 00:01:17,588
No puedes cambiar sus nombres
ni agregar ni eliminar nada.

26
00:01:17,612 --> 00:01:20,320
Ahora hablemos un poco sobre
cómo puedes probar tu diseño.

27
00:01:21,200 --> 00:01:24,033
Soy fanático de CocoDB, así
que tengo este archivo make.

28
00:01:24,057 --> 00:01:27,200
Configuré mi fuente Verilog
aquí e incluyo un banco de

29
00:01:27,200 --> 00:01:30,388
pruebas de alto nivel. El banco
de pruebas simplemente crea

30
00:01:30,412 --> 00:01:33,600
una instancia de un diseño y
conecta los puertos de entrada y salida.

31
00:01:33,600 --> 00:01:36,891
Debería poder reutilizarlo
con muy pocos cambios.

32
00:01:36,915 --> 00:01:40,000
En realidad, todas las
pruebas se realizan en este

33
00:01:40,000 --> 00:01:43,148
archivo de Python. Pongo
en marcha un reloj, lo

34
00:01:43,172 --> 00:01:46,320
reinicio y luego cuento hasta
10 esperando mil relojes.

35
00:01:46,320 --> 00:01:48,356
Ese es el tiempo que se
tarda en contar hasta el

36
00:01:48,380 --> 00:01:50,720
siguiente número en la
pantalla del séptimo segmento.

37
00:01:51,680 --> 00:01:54,148
Luego afirmo que los
segmentos que estoy obteniendo

38
00:01:54,172 --> 00:01:56,640
coinciden con los segmentos
esperados que se mostrarán en la pantalla.

39
00:01:56,640 --> 00:02:00,320
Puedo mostrar eso aquí
en la línea de comando.

40
00:02:00,320 --> 00:02:05,703
Me creó un archivo VCD
que puedo cargar para

41
00:02:05,727 --> 00:02:12,240
inspeccionar con GTK
Wave. Puedo ver que está el

42
00:02:12,240 --> 00:02:15,920
reloj, el reinicio y luego los segmentos
contando en el orden esperado.

43
00:02:17,120 --> 00:02:20,068
Tenemos una acción de prueba
de GitHub que puede usar y esto

44
00:02:20,092 --> 00:02:23,040
simplemente instala la suite
OSS CAD y ejecuta la prueba.

45
00:02:23,040 --> 00:02:26,348
Puedes copiarlo desde el
Repositorio de demostración de Verilog.

46
00:02:26,372 --> 00:02:29,680
Es opcional hacer una prueba
pero lo recomiendo dadas las

47
00:02:29,680 --> 00:02:31,999
largas esperas que tendremos
para recibir nuestros diseños

48
00:02:32,023 --> 00:02:34,640
y el hecho de que no podemos
cambiar cosas después.

49
00:02:34,640 --> 00:02:37,530
También es una buena
idea realizar una verificación a

50
00:02:37,554 --> 00:02:40,800
nivel de puerta, que es donde
tomamos la lista de redes

51
00:02:40,800 --> 00:02:43,294
posteriores a la síntesis y la verificamos
con el mismo banco de pruebas.

52
00:02:43,318 --> 00:02:45,760
Pregunta en Discord si
quieres ayuda para agregarlo.

53
00:02:45,760 --> 00:02:48,771
Buena suerte y
cuéntame cómo te va.

54
00:02:48,795 --> 00:02:51,680
Nos vemos en el canal Verilog y

55
00:02:51,680 --> 00:02:57,360
HDL del servidor de chat de Discord.

